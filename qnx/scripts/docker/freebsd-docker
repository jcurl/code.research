ARG CODE_VERSION=14.2
ARG UBUNTU_VERSION=jammy
FROM ubuntu:${UBUNTU_VERSION}
LABEL MAINTAINER="Jason Curl <jcurl@arcor.de>"

ARG CODE_VERSION
ARG FREEBSD_VERSION=${CODE_VERSION}

# We need to make the install non-interactive, so that we don't get asked for
# tzdata. We don't need DEBIAN_FRONTEND after the build, so we don't make it an
# explicit variable.
ARG DEBIAN_FRONTEND=noninteractive

# And if we happen to build an unsupported release that doesn't receive updates
# anymore, just update the apt sources and continue.
RUN (apt update -y || \
      sed -i -re 's/([a-z]{2}\.)?archive.ubuntu.com|security.ubuntu.com/old-releases.ubuntu.com/g' /etc/apt/sources.list \
      && apt update -y) \
    && apt install -y --no-install-recommends \
      build-essential zlib1g-dev wget pigz \
      lsb-release cmake git-core \
      clang clang-tidy clang-format lld \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

RUN mkdir -p /opt/freebsd/${FREEBSD_VERSION}/aarch64/src \
  && mkdir -p /opt/freebsd/${FREEBSD_VERSION}/aarch64/sysroot \
  && cd /opt/freebsd/${FREEBSD_VERSION}/aarch64/src \
  && wget --no-check-certificate -nc -nv http://ftp.freebsd.org/pub/FreeBSD/releases/arm64/${FREEBSD_VERSION}-RELEASE/base.txz

# Put this on a new line, so we don't need to keep downloading the sources.
# Extract the sources, build it, and then remove the sources and intermediate
# build files.

# -stdlib=libstdc++ (gnu)
#RUN BASE=/opt/freebsd/${FREEBSD_VERSION} \
#  && cd $BASE/aarch64/sysroot \
#  && tar -xf ../src/base.txz ./lib/ ./usr/lib/ ./usr/include/ \
#  && cd ./usr/lib \
#  && find . -xtype l | xargs ls -l | awk -v base="${BASE}" '{print "ln -sf "base"/aarch64/sysroot"$11 " " $9}' | /bin/sh \
#  && ln -s libc++.a $BASE/aarch64/sysroot/usr/lib/libstdc++.a \
#  && ln -s libc++.so $BASE/aarch64/sysroot/usr/lib/libstdc++.so

# Toolchains must provide '-stdlib=libc++' (clang)
RUN BASE=/opt/freebsd/${FREEBSD_VERSION} \
  && cd $BASE/aarch64/sysroot \
  && tar -xf ../src/base.txz ./lib/ ./usr/lib/ ./usr/include/ \
  && cd ./usr/lib \
  && find . -xtype l | xargs ls -l | awk -v base="${BASE}" '{print "ln -sf "base"/aarch64/sysroot"$11 " " $9}' | /bin/sh

RUN mkdir -p /source && mkdir -p /build
WORKDIR /build
CMD [ "bash" ]

