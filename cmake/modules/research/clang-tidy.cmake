macro(check_clang_tidy)
    option(CMAKE_RUN_CLANG_TIDY "Enable checks using Clang-Tidy" ON)
    if(NOT CMAKE_C_COMPILER_LOADED AND NOT CMAKE_CXX_COMPILER_LOADED)
        message(FATAL "Clang-tidy checks enabled require C/C++ project set")
    endif()
    if(CMAKE_RUN_CLANG_TIDY)
        set(_CMAKE_RUN_CLANG_TIDY_CHECK 1)
        if(CMAKE_C_COMPILER_LOADED AND DEFINED CMAKE_C_CLANG_TIDY)
            set(_CMAKE_RUN_CLANG_TIDY_CHECK 0)
        endif()
        if(CMAKE_CXX_COMPILER_LOADED AND DEFINED CMAKE_CXX_CLANG_TIDY)
            set(_CMAKE_RUN_CLANG_TIDY_CHECK 0)
        endif()

        if(_CMAKE_RUN_CLANG_TIDY_CHECK)
            find_program(CLANG_TIDY_COMMAND NAMES "clang-tidy")
            if(CLANG_TIDY_COMMAND)
                set(CMAKE_EXPORT_COMPILE_COMMANDS ON CACHE INTERNAL "")
                # Must specify the C++17 version explicitly. When using GCC toolchain as
                # the compiler, it might decide that it doesn't need to provide the
                # "std=c++17" option (GCC 11.4 supports by default C++17). But then
                # running "clang-tidy" e.g. from clang toolchain 14.0 needs the option.
                # It isn't given as CMake doesn't do an additional check for clang-tidy.
                # If you compile using clang++, then the two come from the same
                # toolchain, so the assumption that the two are compatible holds.
                #
                # https://stackoverflow.com/questions/46808702/how-to-integrate-clang-tidy-with-cmake-lang-clang-tidy-and-msvc
                # https://gitlab.kitware.com/cmake/cmake/-/issues/24238
                if(CMAKE_CROSSCOMPILING)
                    message(STATUS "LLVM clang-tidy is disabled (cross compiling not supported)")
                else()
                    if(CMAKE_C_COMPILER_LOADED)
                        set(CMAKE_C_CLANG_TIDY "${CLANG_TIDY_COMMAND}")
                    endif()
                    if(CMAKE_CXX_COMPILER_LOADED)
                        if(CMAKE_CXX_COMPILER_ID MATCHES "[Cc]lang")
                            message(STATUS "LLVM clang-tidy is enabled with -DCMAKE_RUN_CLANG_TIDY=on")
                            set(CMAKE_CXX_CLANG_TIDY "${CLANG_TIDY_COMMAND}")
                        else()
                            message(STATUS "LLVM clang-tidy is enabled with -DCMAKE_RUN_CLANG_TIDY=on, ensuring C++17")
                            set(CMAKE_CXX_CLANG_TIDY "${CLANG_TIDY_COMMAND};--extra-arg-before=-std=c++17")
                        endif()
                    endif()
                endif()
            else()
                message(STATUS "LLVM clang-tidy is disabled (not found)")
            endif()
        else()
            if(CMAKE_CXX_COMPILER_LOADED AND NOT CMAKE_CXX_CLANG_TIDY AND
               CMAKE_C_COMPILER_LOADED AND NOT CMAKE_C_CLANG_TIDY)
                message(STATUS "LLVM clang-tidy is disabled with CMAKE_[C|CXX]_CLANG_TIDY variable")
            elseif(CMAKE_CXX_COMPILER_LOADED AND CMAKE_CXX_CLANG_TIDY)
                message(STATUS "LLVM clang-tidy is enabled with CMAKE_CXX_CLANG_TIDY variable")
            elseif(CMAKE_C_COMPILER_LOADED AND CMAKE_C_CLANG_TIDY)
                message(STATUS "LLVM clang-tidy is enabled with CMAKE_C_CLANG_TIDY variable")
            else()
                message(STATUS "LLVM clang-tidy is enabled with CMAKE_[C|CXX]_CLANG_TIDY variable")
            endif()
        endif()
        unset(_CMAKE_RUN_CLANG_TIDY_CHECK)
    else()
        message(STATUS "LLVM clang-tidy is disabled with -DCMAKE_RUN_CLANG_TIDY=off")
        if(CMAKE_CXX_COMPILER_LOADED)
            unset(CMAKE_CXX_CLANG_TIDY)
        endif()
        if(CMAKE_C_COMPILER_LOADED)
            unset(CMAKE_C_CLANG_TIDY)
        endif()
    endif()
endmacro(check_clang_tidy)
